# Sample config file 
# Find paths that connect entries in a source-target pair file,
# requiring that the last interaction is between a candidate regulator
# for that source and a target.

# We're going to apply a default feature value to all edges in a file.
# "CatSet" means that an edge can take multiple labels
# (I'm assuming that "ppi" is code for "undirected" and "regulatory" is code for "directed")
EFEATURE	etype=CatSet(directed|undirected)

# You can read in multiple files of edges
# The starting column is the column of the first node, in case we have
# other info preceding it.
#edge_library	filename	default_feature_value	starting_column
EDGE_LIBRARY	./data/subnetwork-directed.tsv	etype=directed	1
EDGE_LIBRARY	./data/subnetwork-undirected.tsv	etype=undirected	1

# You can read in a node set and apply a label to it
# Nodes are assumed to be the first column in the file
#NFEATURE	feature=type(value1|value2...)	description_for_user	location	delimiter	column_of_value	
NFEATURE	ntype=discrete(Condition|Gene|Pathway|Molecule)	type of node	./data/subnetwork-nodes.tsv	\t	2

# This "edge filter" has a method that returns true for undirected ("ppi") edges
# that have the "ppi" value for feature "etype"
#EFILTER	name	filter_subclass	feature	accepted_value
EFILTER	undirected_filter	EqualsFilter	etype	undirected

# An EdgeFilterManager is a wrapper around one or more edge filters.
# If we had multiple filters, we could say: "accept this edge if it is accepted
# by at least one of a set of filters (OR)"
# or, given a set of edges, "accept this set of edges if at least one (ANY) 
# is accepted by at least one of a set of filters (OR)"
# In this case, we just accept any edge that has the label "regulatory".
# (this would also accept a set of edges, say a path, if at least one of them is regulatory)

#EFILTERMANAGER	name	how_to_combine_filter_accepts	how_to_accept_set_of_items	filterA|filterB...
EFILTERMANAGER	filter_manager	or	any	undirected_filter

# Define pairs in a two-column file
# source-target pairs
#ST_PAIRS	name	location
ST_PAIRS	st_pairs	./data/subnetwork-llr.tsv

# Find paths from sources to targets in which the final interaction 
# is one between a candidate regulator and the target.
# (Any kind of interaction)
#PATHFINDER	name	PathFinder_subclass	source_target_pairs	source_regulator_pairs	depth
#PATHFINDER	srt_paths	SourceRegTargetPathFinder	st_pairs	sr_pairs	3

# Another approach to the same problem:
# find paths from sources to targets in which the final interaction
# is labelled "regulatory"
#PATHFINDER	name	PathFinder_subclass	source_target_pairs	filter_manager_for_final_interaction	depth
PATHFINDER	st_paths	RegPairPathFinder	st_pairs	filter_manager	4

# Cytoscape output filename prefix
OUT_PREFIX	./output_data/search_test

# GAMS output filename 
GAMS_FILE	./output_data/search_test.gms

# Features to print to GAMS output file. 
# GAMS_xFEATS	a[|b|c...]
GAMS_EFEATS	etype
GAMS_NFEATS	ntype
